#!/usr/bin/env python

from __future__ import print_function
import os, sys
import subprocess
from subprocess import Popen, CalledProcessError
import re
import tempfile
import time 
import shutil

from buildfarm import rosdistro
from rosrpm.core import fedora_release_version

def parse_options():
    import argparse
    parser = argparse.ArgumentParser(description='Creates a set of source RPMs from a catkin release repo. Creates source RPMs from the latest upstream version.')
    parser.add_argument(dest='repo_uri',
            help='A read-only git buildpackage repo uri.')
    parser.add_argument('package_name', help='The package name for the package we\'re building')
    parser.add_argument('rosdistro', help='Which rosdistro to operate on')
    parser.add_argument('short_package_name', help='The package name for the package we\'re building, w/o the Red Hat extensions')
    parser.add_argument('--working', help='A scratch build path. Default: %(default)s', default='/tmp/catkin_release')
    parser.add_argument('--output', help='The result of source RPM building will go here. Default: %(default)s', default='/tmp/catkin_rpms')
    parser.add_argument('--repo-fqdn', dest='repo_fqdn', help='The fully qualified domain name of the repo machine. Default: %(default)s', default='csc.mcs.sdsmt.edu')
    parser.add_argument('--repo-path', dest='repo_path', help='The path to find the repo on the machine. Default: %(default)s', default='/var/www/repos/building')
    parser.add_argument('-n', dest='noupload', help='Do not try to upload', action='store_true', default=False)
    
    args = parser.parse_args()

    return args

def make_working(working_dir):
    if not os.path.exists(working_dir):
        os.makedirs(working_dir)

def call(working_dir, command, pipe=None):
    print('+ cd %s && ' % working_dir + ' '.join(command))
    process = Popen(command, stdout=pipe, stderr=pipe, cwd=working_dir)
    output, unused_err = process.communicate()
    retcode = process.poll()
    if retcode:
        raise CalledProcessError(retcode, command)
    if pipe:
        return output

def check_local_repo_exists(repo_path):
    return os.path.exists(os.path.join(repo_path, '.git'))

def update_repo(working_dir, repo_path, repo_uri):
    if check_local_repo_exists(repo_path):
        print(repo_path)
        command = ('git', 'fetch', '--all')
        call(repo_path, command)
    else:
        command = ('git', 'clone', repo_uri)
        call(working_dir, command)

def verify_redhat_tag(repo_uri, working_dir, package_name, package_version, distro):

    tags = call(working_dir, ('git', 'ls-remote', '--tags', repo_uri, 'redhat/*'), pipe=subprocess.PIPE)

    expected_tag = 'redhat/%s_%s_%s'%(package_name, package_version, distro)
    tag_list = []
    for tag in tags.split('\n'):
        if tag != '':
            tag_list += [tag.split()[-1].replace('refs/tags/','')]

    if expected_tag in tag_list:
        return expected_tag
    else:
        print("No matching tag found. Are you sure you pointed to the right repository or the version is right?, expected %s:\n Tags: %s"%(expected_tag, tags))
    return None

def build_source_rpm(working_dir, repo_uri, tag, packagename, distro, output):
    call(working_dir, ('/usr/bin/mock', '--quiet', '--root=fedora-' + fedora_release_version(distro) + '-i386', '--buildsrpm', '--resultdir=' + output, '--scm-enable', '--scm-option', 'git_get=git clone ' + repo_uri + ' ' + packagename, '--scm-option', 'package=' + packagename, '--scm-option', 'branch=' + tag))
    print("Successfully created source RPM in %s"%output)
    call(working_dir, ['ls', output])

def remove_upstream_source(distro, repo_fqdn, repo_path, package):
    # clear existing RPMs if they exits
    cmd = ['ssh', 'rosbuild@%(repo_fqdn)s' %locals(), '--',"( flock 200; /usr/bin/reprepro -b %(repo_path)s --ignore=emptyfilenamepart -V -T dsc removefilter %(distro)s \"Package (== %(package)s ) \" ) 200>%(repo_path)s/lock" %locals()]
    call('/tmp/', cmd)
    

def upload_source_rpm(distro, repo_fqdn, repo_path, upload_source, packagename):


    upload_dir="/tmp/upload/%s_%s" % (packagename, distro)
    cmd = ("ssh rosbuild@%s -- mkdir -p %s"%(repo_fqdn, upload_dir)).split()
    call('/tmp/', cmd)
    cmd = ("scp -r %s rosbuild@%s:%s"%(upload_source, repo_fqdn, upload_dir)).split()
    call('/tmp/', cmd)

    cmd = ("ssh rosbuild@%(repo_fqdn)s -- PYTHONPATH=/home/rosbuild/reprepro_updater/src python /home/rosbuild/reprepro_updater/scripts/include_folder.py -d %(distro)s -a SRPM -f %(upload_dir)s/%(distro)s -p %(packagename)s --delete --invalidate"%locals()).split()
    call('/tmp/', cmd)


def find_file(directory, extension, substring=''):
    """ Return the first file in directory which has extension and contains the substring """
    files = os.listdir(directory)
    for f in files:
        if extension == os.path.splitext(f)[1] and substring in f:
            return f
    return None
    


if __name__ == "__main__":
    args = parse_options()
    make_working(args.working)

    rd = rosdistro.Rosdistro(args.rosdistro)

    package_version = rd.get_version(args.short_package_name, full_version=True)
    print ("package name", args.short_package_name, "version", package_version)

    repo_base, extension = os.path.splitext(os.path.basename(args.repo_uri))
    repo_path = os.path.join(args.working, repo_base)

    #update_repo(working_dir=args.working, repo_path=repo_path, repo_uri=args.repo_uri)

    report_failure = False
    for d in rd.get_target_distros():

        tag = verify_redhat_tag(args.repo_uri, args.working, args.package_name, package_version, d)
        if not tag:
            print("No tag; bailing")
            report_failure = True
            continue


        output_dir = os.path.join(args.output, d)
        os.makedirs(output_dir)
        try:
            build_source_rpm(args.working, args.repo_uri, tag, args.package_name, d, output_dir)
            print("successfully created source RPM for tag %s on repo %s."%(tag, repo_path))
        except CalledProcessError, ex:
            print("Failed to build source RPM for tag %s on repo %s: %s"%(tag, repo_path, ex))
            report_failure = True
            continue

            
        try:

            if args.noupload:
                print("Noupload argument passed, skipping upload of %s" % output_dir)
                continue

            print(os.listdir(output_dir))

            # remove upstream so it doesn't error if we're downgrading
            #remove_upstream_source(d, args.repo_fqdn, args.repo_path, args.package_name)

            upload_source_rpm(d, args.repo_fqdn, args.repo_path, 
                              output_dir,
                              args.package_name
                              )
            print("Succeeded uploading for distro %s."%(d))
        except CalledProcessError, ex:
            print("Failed uploading for distro %s: %s"%(d, ex))
            report_failure = True
            continue

    if report_failure:
        print("Errors have occurred in the source build see above. ")
        sys.exit(1)
